# Generated by Django 4.2.20 on 2025-08-03 00:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('orders', '0006_alter_orderstatushistory_options_and_more'),
        ('shop', '0002_product_discount_percentage_product_discount_price_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(default='Chile', max_length=100)),
                ('tax_id', models.CharField(blank=True, help_text='RUT del proveedor', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=1, help_text='Calificación del proveedor (1-5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.TextField(blank=True, help_text='Notas internas sobre el proveedor')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaxConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ej: IVA Chile', max_length=100)),
                ('rate', models.DecimalField(decimal_places=2, help_text='Porcentaje de impuesto (19% = 19.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('applies_to_shipping', models.BooleanField(default=False, help_text='¿Se aplica al costo de envío?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuración de Impuesto',
                'verbose_name_plural': 'Configuraciones de Impuestos',
                'ordering': ['-is_active', 'name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='is_tax_exempt',
            field=models.BooleanField(default=False, help_text='¿Exento de impuestos?'),
        ),
        migrations.CreateModel(
            name='ProductStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('entry', 'Entrada'), ('exit', 'Salida'), ('adjustment', 'Ajuste'), ('sale', 'Venta'), ('return', 'Devolución'), ('damage', 'Producto Dañado'), ('expired', 'Producto Vencido')], max_length=20)),
                ('quantity', models.IntegerField(help_text='Cantidad (positiva para entradas, negativa para salidas)')),
                ('previous_stock', models.PositiveIntegerField()),
                ('new_stock', models.PositiveIntegerField()),
                ('reason', models.CharField(help_text='Motivo del movimiento', max_length=200)),
                ('reference', models.CharField(blank=True, help_text='Referencia (ej: # de orden)', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='shop.product')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Movimiento de Stock',
                'verbose_name_plural': 'Movimientos de Stock',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiscountCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Código del cupón (ej: DESCUENTO20)', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Nombre descriptivo del cupón', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Descripción para el cliente')),
                ('discount_type', models.CharField(choices=[('percentage', 'Porcentaje'), ('fixed_amount', 'Monto Fijo'), ('free_shipping', 'Envío Gratis')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Valor del descuento (% o monto en CLP)', max_digits=10)),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=0, help_text='Monto mínimo de compra para aplicar el cupón', max_digits=10)),
                ('maximum_discount_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Monto máximo de descuento (solo para porcentajes)', max_digits=10, null=True)),
                ('usage_type', models.CharField(choices=[('single_use', 'Un solo uso'), ('multiple_use', 'Uso múltiple'), ('per_customer', 'Una vez por cliente')], default='multiple_use', max_length=20)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Número máximo de usos (vacío = ilimitado)', null=True)),
                ('current_uses', models.PositiveIntegerField(default=0)),
                ('valid_from', models.DateTimeField(help_text='Fecha de inicio de validez')),
                ('valid_until', models.DateTimeField(help_text='Fecha de expiración')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='Categorías aplicables (vacío = todas)', to='shop.category')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('excluded_products', models.ManyToManyField(blank=True, help_text='Productos excluidos del descuento', related_name='excluded_from_coupons', to='shop.product')),
                ('products', models.ManyToManyField(blank=True, help_text='Productos específicos (vacío = todos)', to='shop.product')),
            ],
            options={
                'verbose_name': 'Cupón de Descuento',
                'verbose_name_plural': 'Cupones de Descuento',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CouponUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('used_at', models.DateTimeField(auto_now_add=True)),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='shop.discountcoupon')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.order')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Uso de Cupón',
                'verbose_name_plural': 'Usos de Cupones',
                'ordering': ['-used_at'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tax_configuration',
            field=models.ForeignKey(blank=True, help_text='Configuración de impuesto aplicable', null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.taxconfiguration'),
        ),
        migrations.CreateModel(
            name='ProductSupplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_sku', models.CharField(blank=True, help_text='SKU del proveedor', max_length=100)),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Precio de costo', max_digits=10)),
                ('minimum_order_quantity', models.PositiveIntegerField(default=1)),
                ('lead_time_days', models.PositiveIntegerField(help_text='Días de entrega')),
                ('is_primary', models.BooleanField(default=False, help_text='¿Es el proveedor principal?')),
                ('last_order_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_info', to='shop.product')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.supplier')),
            ],
            options={
                'verbose_name': 'Producto-Proveedor',
                'verbose_name_plural': 'Productos-Proveedores',
                'ordering': ['-is_primary', 'supplier__name'],
                'unique_together': {('product', 'supplier')},
            },
        ),
    ]
