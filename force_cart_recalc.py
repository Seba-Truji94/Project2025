#!/usr/bin/env python3
"""
Script para forzar la recalculaci√≥n y limpieza de carritos
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dulce_bias_project.settings')
django.setup()

from django.contrib.auth.models import User
from cart.models import Cart, CartItem
from shop.models import Product

def force_cart_recalculation():
    print("üîÑ FORZANDO: Recalculaci√≥n de carritos")
    print("=" * 50)
    
    # 1. Eliminar CartItems hu√©rfanos o con productos inexistentes
    print("1Ô∏è‚É£ Limpiando items hu√©rfanos...")
    
    orphaned_items = 0
    invalid_items = 0
    
    for item in CartItem.objects.all():
        try:
            # Verificar que el producto existe y est√° disponible
            if not hasattr(item, 'product') or not item.product:
                item.delete()
                orphaned_items += 1
                continue
                
            # Verificar que el producto est√° disponible
            if not item.product.available:
                print(f"   üóëÔ∏è Eliminando producto no disponible: {item.product.name}")
                item.delete()
                invalid_items += 1
                continue
                
            # Verificar que la cantidad es v√°lida
            if item.quantity <= 0:
                print(f"   üóëÔ∏è Eliminando item con cantidad inv√°lida: {item.product.name}")
                item.delete()
                invalid_items += 1
                continue
                
        except Exception as e:
            print(f"   üóëÔ∏è Eliminando item problem√°tico: {str(e)}")
            item.delete()
            orphaned_items += 1
    
    print(f"   ‚úÖ Items hu√©rfanos eliminados: {orphaned_items}")
    print(f"   ‚úÖ Items inv√°lidos eliminados: {invalid_items}")
    
    # 2. Verificar y corregir carritos
    print("\n2Ô∏è‚É£ Verificando carritos...")
    
    for cart in Cart.objects.all():
        items_count = cart.items.count()
        calculated_total = sum(item.quantity for item in cart.items.all())
        
        print(f"   üìã {cart.user.username}:")
        print(f"      - Items DB: {items_count}")
        print(f"      - Total calculado: {calculated_total}")
        print(f"      - Precio total: ${cart.total_price}")
        
        # Si el carrito est√° vac√≠o, asegurarse de que no tenga items fantasma
        if items_count == 0:
            # Verificar si hay items que no se est√°n contando
            all_items = CartItem.objects.filter(cart=cart)
            if all_items.exists():
                print(f"      üóëÔ∏è Eliminando {all_items.count()} items fantasma")
                all_items.delete()
    
    # 3. Eliminar carritos completamente vac√≠os de usuarios que no han hecho login recientemente
    print("\n3Ô∏è‚É£ Limpiando carritos vac√≠os...")
    
    empty_carts = Cart.objects.annotate(
        items_count=models.Count('items')
    ).filter(items_count=0)
    
    print(f"   üìä Carritos vac√≠os encontrados: {empty_carts.count()}")
    
    # No eliminar carritos vac√≠os, solo reportar
    for cart in empty_carts:
        print(f"   üìù Carrito vac√≠o: {cart.user.username}")
    
    # 4. Verificaci√≥n final
    print("\n4Ô∏è‚É£ Verificaci√≥n final...")
    
    total_carts = Cart.objects.count()
    total_items = CartItem.objects.count()
    total_users_with_items = Cart.objects.annotate(
        items_count=models.Count('items')
    ).filter(items_count__gt=0).count()
    
    print(f"   üìä Total carritos: {total_carts}")
    print(f"   üì¶ Total items: {total_items}")
    print(f"   üë• Usuarios con items: {total_users_with_items}")
    
    # 5. Mostrar estado actualizado de cada carrito
    print("\n5Ô∏è‚É£ Estado final de carritos...")
    
    for cart in Cart.objects.all():
        items_count = cart.items.count()
        if items_count > 0:
            print(f"   ‚úÖ {cart.user.username}: {items_count} items, ${cart.total_price}")
        else:
            print(f"   üì≠ {cart.user.username}: carrito vac√≠o")
    
    print("\nüéØ RECALCULACI√ìN COMPLETADA")
    print("‚úÖ Carritos limpiados y verificados")
    print("‚úÖ Items inv√°lidos eliminados")
    print("‚úÖ C√°lculos actualizados")

if __name__ == "__main__":
    # Importar models despu√©s de django.setup()
    from django.db import models
    force_cart_recalculation()
